// Code generated by go-bindata.
// sources:
// assets/css/base.css
// assets/css/bundle/bundle.css
// assets/css/gzip/bundle.min.css
// assets/css/min/bundle.min.css
// assets/html/gzip/index.min.html
// assets/html/index.html
// assets/html/min/index.min.html
// assets/templates/articles/readme.html
// assets/templates/fragments/nav.html
// assets/templates/index.html
// DO NOT EDIT!

package public

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCssBaseCss = []byte(`body {
	background-color: #000;
	color: #FFF;
}
`)

func assetsCssBaseCssBytes() ([]byte, error) {
	return _assetsCssBaseCss, nil
}

func assetsCssBaseCss() (*asset, error) {
	bytes, err := assetsCssBaseCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/base.css", size: 48, mode: os.FileMode(420), modTime: time.Unix(1488991495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCssBundleBundleCss = []byte(`body {
	background-color: #000;
	color: #FFF;
}

`)

func assetsCssBundleBundleCssBytes() ([]byte, error) {
	return _assetsCssBundleBundleCss, nil
}

func assetsCssBundleBundleCss() (*asset, error) {
	bytes, err := assetsCssBundleBundleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/bundle/bundle.css", size: 49, mode: os.FileMode(420), modTime: time.Unix(1488992580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCssGzipBundleMinCss = []byte("\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xffJ\xcaO\xa9T\xa8VHJL\xceN/\xca/\xcdK\xd1M\xce\xcf\xc9/\xb2RP600\xb0V\x80q\xdc\xdc\u072c\x15j\x15\x00\x00\x00\x00\xff\xff\x01\x00\x00\xff\xff\x9c\x87\xa2\xde.\x00\x00\x00")

func assetsCssGzipBundleMinCssBytes() ([]byte, error) {
	return _assetsCssGzipBundleMinCss, nil
}

func assetsCssGzipBundleMinCss() (*asset, error) {
	bytes, err := assetsCssGzipBundleMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/gzip/bundle.min.css", size: 69, mode: os.FileMode(420), modTime: time.Unix(1488992580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCssMinBundleMinCss = []byte(`body { background-color: #000; color: #FFF; } `)

func assetsCssMinBundleMinCssBytes() ([]byte, error) {
	return _assetsCssMinBundleMinCss, nil
}

func assetsCssMinBundleMinCss() (*asset, error) {
	bytes, err := assetsCssMinBundleMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/min/bundle.min.css", size: 46, mode: os.FileMode(420), modTime: time.Unix(1488992580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsHtmlGzipIndexMinHtml = []byte("\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xffD\x90\xb1n\xc30\fD\u007f\x85\xd5\xd2%\x8e\u041d\x12\u0421@\x97\xa2C\xbf\x80\xb1\x98\x98\xa8D\x19\x16\xe3\xd4\xf9\xfa\xc2q\x9aN\xd2\x1d\u0791\a\xe2S\xaa\xbd-#\xc3`%G\xc0\xbf\x87)E\xc0\xc2F\xa0T8\xb8Y\xf82\xd6\xc9\x1c\xf4U\x8d\u0542\xbbH\xb2!$\x9e\xa5\xe7\xee&v *&\x94\xbb\xd6S\xe6\xf0\xb2\x83\"*\x85rw\x16\x17\x01M,s\xfc\x922fF\xbf)\xc0,\xfa\r\x13\xe7\xe0\x9a-\x99\xdb\xc0l\x0e\xd6Z\xc1\x19\xff\x98\xef[s0L|\f\xceSklm\xb5\xfc\xe9*\xa3?\x9c5e\xde\x17\xd1\xfd\x8aE@\u007fo\u007f\xa8i\x89\x80Js\x04$\x90\x14\xdcP\v?&\xb9\xf8\xfe\xf9\xf1\x86\x9e\xd6\xccF%\xb9\xb1\x93I\xbf6{\x85L\xd7\x05\n\xe9s\x83\xe3T\xd5:\xd6\x046\x88\x9e\x16@\xff\x00\xd1oI\u007f\xdfy\xac\xd5xZ\x8d\xff\xdfv\xda_\x00\x00\x00\xff\xff\x01\x00\x00\xff\xff\b\xcd\u0725r\x01\x00\x00")

func assetsHtmlGzipIndexMinHtmlBytes() ([]byte, error) {
	return _assetsHtmlGzipIndexMinHtml, nil
}

func assetsHtmlGzipIndexMinHtml() (*asset, error) {
	bytes, err := assetsHtmlGzipIndexMinHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/html/gzip/index.min.html", size: 267, mode: os.FileMode(420), modTime: time.Unix(1488992580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsHtmlIndexHtml = []byte(`<!doctype html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1, minimal-ui">
		<title>Simple</title>
		<link rel="stylesheet" type="text/css" href="/assets/css/gzip/bundle.min.css">
	</head>
	<body>

		<nav>
	<a id="home" href="/">HOME</a>
</nav>


		<div>
			<article>
				A lazy man's front-end thingy

			</article>
		</div>

	</body>
	<footer>
	</footer>
</html>
`)

func assetsHtmlIndexHtmlBytes() ([]byte, error) {
	return _assetsHtmlIndexHtml, nil
}

func assetsHtmlIndexHtml() (*asset, error) {
	bytes, err := assetsHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/html/index.html", size: 404, mode: os.FileMode(420), modTime: time.Unix(1488992580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsHtmlMinIndexMinHtml = []byte(`<!doctype html> <html> <head> <meta name="viewport" content="width=device-width, initial-scale=1, minimal-ui"> <title>Simple</title> <link rel="stylesheet" type="text/css" href="/assets/css/gzip/bundle.min.css"> </head> <body> <nav> <a id="home" href="/">HOME</a> </nav> <div> <article> A lazy man's front-end thingy </article> </div> </body> <footer> </footer> </html> `)

func assetsHtmlMinIndexMinHtmlBytes() ([]byte, error) {
	return _assetsHtmlMinIndexMinHtml, nil
}

func assetsHtmlMinIndexMinHtml() (*asset, error) {
	bytes, err := assetsHtmlMinIndexMinHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/html/min/index.min.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1488992580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesArticlesReadmeHtml = []byte(`A lazy man's front-end thingy
`)

func assetsTemplatesArticlesReadmeHtmlBytes() ([]byte, error) {
	return _assetsTemplatesArticlesReadmeHtml, nil
}

func assetsTemplatesArticlesReadmeHtml() (*asset, error) {
	bytes, err := assetsTemplatesArticlesReadmeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/articles/readme.html", size: 30, mode: os.FileMode(420), modTime: time.Unix(1488991398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesFragmentsNavHtml = []byte(`<nav>
	<a id="home" href="/">HOME</a>
</nav>
`)

func assetsTemplatesFragmentsNavHtmlBytes() ([]byte, error) {
	return _assetsTemplatesFragmentsNavHtml, nil
}

func assetsTemplatesFragmentsNavHtml() (*asset, error) {
	bytes, err := assetsTemplatesFragmentsNavHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/fragments/nav.html", size: 45, mode: os.FileMode(420), modTime: time.Unix(1488990918, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesIndexHtml = []byte(`<!doctype html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1, minimal-ui">
		<title>Simple</title>
		<link rel="stylesheet" type="text/css" href="/assets/css/gzip/bundle.min.css">
	</head>
	<body>

		{{ template "nav.html" }}

		<div>
			<article>
				{{ template "readme.html" }}
			</article>
		</div>

	</body>
	<footer>
	</footer>
</html>
`)

func assetsTemplatesIndexHtmlBytes() ([]byte, error) {
	return _assetsTemplatesIndexHtml, nil
}

func assetsTemplatesIndexHtml() (*asset, error) {
	bytes, err := assetsTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/index.html", size: 382, mode: os.FileMode(420), modTime: time.Unix(1488991414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/base.css": assetsCssBaseCss,
	"assets/css/bundle/bundle.css": assetsCssBundleBundleCss,
	"assets/css/gzip/bundle.min.css": assetsCssGzipBundleMinCss,
	"assets/css/min/bundle.min.css": assetsCssMinBundleMinCss,
	"assets/html/gzip/index.min.html": assetsHtmlGzipIndexMinHtml,
	"assets/html/index.html": assetsHtmlIndexHtml,
	"assets/html/min/index.min.html": assetsHtmlMinIndexMinHtml,
	"assets/templates/articles/readme.html": assetsTemplatesArticlesReadmeHtml,
	"assets/templates/fragments/nav.html": assetsTemplatesFragmentsNavHtml,
	"assets/templates/index.html": assetsTemplatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"base.css": &bintree{assetsCssBaseCss, map[string]*bintree{}},
			"bundle": &bintree{nil, map[string]*bintree{
				"bundle.css": &bintree{assetsCssBundleBundleCss, map[string]*bintree{}},
			}},
			"gzip": &bintree{nil, map[string]*bintree{
				"bundle.min.css": &bintree{assetsCssGzipBundleMinCss, map[string]*bintree{}},
			}},
			"min": &bintree{nil, map[string]*bintree{
				"bundle.min.css": &bintree{assetsCssMinBundleMinCss, map[string]*bintree{}},
			}},
		}},
		"html": &bintree{nil, map[string]*bintree{
			"gzip": &bintree{nil, map[string]*bintree{
				"index.min.html": &bintree{assetsHtmlGzipIndexMinHtml, map[string]*bintree{}},
			}},
			"index.html": &bintree{assetsHtmlIndexHtml, map[string]*bintree{}},
			"min": &bintree{nil, map[string]*bintree{
				"index.min.html": &bintree{assetsHtmlMinIndexMinHtml, map[string]*bintree{}},
			}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"articles": &bintree{nil, map[string]*bintree{
				"readme.html": &bintree{assetsTemplatesArticlesReadmeHtml, map[string]*bintree{}},
			}},
			"fragments": &bintree{nil, map[string]*bintree{
				"nav.html": &bintree{assetsTemplatesFragmentsNavHtml, map[string]*bintree{}},
			}},
			"index.html": &bintree{assetsTemplatesIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

